!function(){"use strict";var a="front",b="back",c="straddle",d="on";window.sliceGeometry=function(b,h){var j,k,l=new THREE.Geometry;return b.faces.forEach(function(m,n){j=g(b,m,n),k=i(h,j),k==a||k==d?f(l,j):k==c&&e(h,l,j)}),l};var e=function(b,c,d){var e,g,i,k,l,m,n=d.length,o=[];for(e=0;n>e;e++)g=d[e],i=n>e+1?d[e+1]:d[0],k=h(g,i,b),l=j(b,g.vertex),m=j(b,i.vertex),l==a&&-1===o.indexOf(g)&&o.push(g),k&&o.push(k),m==a&&-1===o.indexOf(i)&&o.push(i);o.length>3?(f(c,[o[0],o[1],o[2]]),f(c,[o[2],o[3],o[0]])):f(c,o)},f=function(a,b){var c,d,e=[],f=a.vertices.length,g=[],h=[];b.forEach(function(b){return c=a.vertices.indexOf(b.vertex),-1!==c?e.push(c):(a.vertices.push(b.vertex),e.push(f),f+=1),b.normal&&g.push(b.normal),b.uv&&h.push(b.uv),!d});var i=new THREE.Face3(e[0],e[1],e[2],g);a.faces.push(i),h.length&&a.faceVertexUvs[0].push(h)},g=function(a,b,c){var d=a.faceVertexUvs[0];return["a","b","c"].map(function(e,f){return{vertex:a.vertices[b[e]],normal:b.vertexNormals[f],uv:d[c]?d[c][f]:void 0}})},h=function(a,b,c){var d=new THREE.Line3(a.vertex,b.vertex),e=c.intersectLine(d);if(e){var f=a.vertex.distanceTo(e),g=f/d.distance();return{vertex:e,normal:a.normal.clone().lerp(b.normal,g).normalize(),uv:a.uv&&b.uv?a.uv.clone().lerp(b.uv,g):null}}},i=function(e,f){var g=j(e,f[0].vertex),h=j(e,f[1].vertex),i=j(e,f[2].vertex);return g==b||h==b||i==b?g==a||h==a||i==a?c:b:g==a||h==a||i==a?g==b||h==b||i==b?c:a:d},j=function(c,e){var f=c.distanceToPoint(e);return 0>f?b:f>0?a:d}}();