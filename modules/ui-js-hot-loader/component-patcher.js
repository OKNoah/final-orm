// Generated by CoffeeScript 1.10.0
var clearProps, copyProps, createWrapper, logicChange, propChange,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

module.exports.test = function(target) {
  return target.selector && target.template;
};

module.exports.patch = function(target, module) {
  var Wrapper, ref;
  Wrapper = ((ref = module.hot.data) != null ? ref.component : void 0) || createWrapper(target);
  Wrapper.__updateComponent(target);
  module.hot.dispose(function(data) {
    return data.component = Wrapper;
  });
  module.hot.accept();
  return Wrapper;
};

createWrapper = function(target) {
  var CurrentComponent, OldComponent, Wrapper;
  CurrentComponent = null;
  OldComponent = null;
  Wrapper = eval("(function " + target.name + "(){ return CurrentComponent.apply(this, arguments) })");
  Wrapper.__updateComponent = function(NewComponent) {
    var componentsChange, error, error1, templateChange;
    try {
      if (!CurrentComponent) {
        CurrentComponent = NewComponent;
        copyProps(Wrapper, CurrentComponent);
        return;
      }
      OldComponent = CurrentComponent;
      CurrentComponent = NewComponent;
      clearProps(Wrapper, OldComponent);
      copyProps(Wrapper, CurrentComponent);
      if (logicChange(OldComponent, CurrentComponent)) {
        Wrapper.reload();
        return;
      }
      if (propChange('style', OldComponent, CurrentComponent)) {
        Wrapper.reloadStyle();
      }
      templateChange = propChange('template', OldComponent, CurrentComponent);
      componentsChange = propChange('components', OldComponent, CurrentComponent);
      if (templateChange || componentsChange) {
        Wrapper.reloadTemplate();
      }
    } catch (error1) {
      error = error1;
      console.error(error);
    }
  };
  return Wrapper;
};

clearProps = function(Wrapper, OldComponent) {
  var key, ref, value;
  ref = OldComponent.prototype;
  for (key in ref) {
    value = ref[key];
    delete Wrapper.prototype[key];
  }
  for (key in OldComponent) {
    value = OldComponent[key];
    delete Wrapper[key];
  }
};

copyProps = function(Wrapper, CurrentComponent) {
  var key, ref, value;
  ref = CurrentComponent.prototype;
  for (key in ref) {
    value = ref[key];
    Wrapper.prototype[key] = value;
  }
  Wrapper.prototype.constructor = Wrapper;
  for (key in CurrentComponent) {
    value = CurrentComponent[key];
    Wrapper[key] = value;
  }
};

propChange = function(prop, OldComponent, CurrentComponent) {
  return OldComponent[prop] + '' !== CurrentComponent[prop] + '';
};

logicChange = function(OldComponent, CurrentComponent) {
  var except, i, j, key, keys, len, len1, oldKeys, oldValue, value;
  except = ['style', 'template', 'components'];
  oldKeys = Object.getOwnPropertyNames(OldComponent);
  keys = Object.getOwnPropertyNames(CurrentComponent);
  oldKeys = keys.filter(function(key) {
    return !(indexOf.call(except, key) >= 0);
  });
  keys = keys.filter(function(key) {
    return !(indexOf.call(except, key) >= 0);
  });
  if (keys.length !== oldKeys.length) {
    return true;
  }
  for (i = 0, len = keys.length; i < len; i++) {
    key = keys[i];
    value = CurrentComponent[key] + '';
    oldValue = OldComponent[key] + '';
    if (value !== oldValue) {
      return true;
    }
  }
  oldKeys = Object.getOwnPropertyNames(OldComponent.prototype);
  keys = Object.getOwnPropertyNames(CurrentComponent.prototype);
  if (oldKeys.length !== keys.length) {
    return true;
  }
  for (j = 0, len1 = keys.length; j < len1; j++) {
    key = keys[j];
    value = CurrentComponent.prototype[key] + '';
    oldValue = OldComponent.prototype[key] + '';
    if (value !== oldValue) {
      return true;
    }
  }
  return false;
};

//# sourceMappingURL=component-patcher.js.map
