// Generated by CoffeeScript 1.10.0
var HtmlRender, RenderResult,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

module.exports = HtmlRender = (function() {
  var allowAttrRegExp;

  function HtmlRender(node1) {
    this.node = node1;
    return;
  }

  HtmlRender.prototype.render = function() {
    var renderResult;
    renderResult = this.renderNode(this.node);
    return renderResult.html;
  };

  HtmlRender.prototype.renderNode = function(node, shadowOnly, excludeNodes) {
    if (shadowOnly == null) {
      shadowOnly = false;
    }
    if (excludeNodes == null) {
      excludeNodes = [];
    }
    switch (node.nodeType) {
      case 'element':
        return this.renderElement(node, shadowOnly, excludeNodes);
      case 'text':
        return this.renderText(node);
      case 'comment':
        return this.renderComment(node);
    }
    throw Error("Unknown node type " + node);
  };

  HtmlRender.prototype.getShadowId = function(node) {
    var context;
    context = node;
    while (context.parent) {
      context = context.parent;
    }
    return context.shadowId;
  };

  allowAttrRegExp = /^\w/;

  HtmlRender.prototype.renderElement = function(node, shadowOnly, excludeNodes) {
    var attrs, child, childRenderResult, content, contentRoot, hostShadowId, i, j, len, len1, ref, ref1, renderResult, shadowId, style, tag;
    tag = node.tag;
    content = '';
    renderResult = new RenderResult(node);
    contentRoot = node.shadowRoot || node;
    attrs = '';
    node.eachAttrs(function(name, value) {
      if (!allowAttrRegExp.test(name)) {
        return;
      }
      return attrs += " " + name + "=\"" + value + "\"";
    });
    style = node.style.toString();
    if (style) {
      attrs += " style=\"" + style + "\"";
    }
    shadowId = this.getShadowId(node);
    if (shadowId != null) {
      attrs += " c" + shadowId;
    }
    if (node.shadowRoot) {
      hostShadowId = node.shadowRoot.shadowId;
      attrs += " h" + hostShadowId;
      tag = "ui-" + tag;
    }
    ref = contentRoot.children;
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      if (child.nodeType === 'comment') {
        continue;
      } else if (child.tag === 'content') {
        ref1 = this.renderContentElement(child, shadowOnly, excludeNodes);
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          childRenderResult = ref1[j];
          renderResult.appendChild(childRenderResult);
          content += childRenderResult.html;
        }
      } else {
        if (indexOf.call(excludeNodes, child) >= 0) {
          continue;
        }
        childRenderResult = this.renderNode(child, shadowOnly, excludeNodes);
        if (childRenderResult) {
          renderResult.appendChild(childRenderResult);
          content += childRenderResult.html;
        }
      }
    }
    renderResult.html = "<" + tag + attrs + ">" + content + "</" + tag + ">";
    return renderResult;
  };

  HtmlRender.prototype.renderText = function(node) {
    var html;
    html = node.value + '';
    return new RenderResult(node, html);
  };

  HtmlRender.prototype.renderComment = function(node) {
    var html;
    html = "<!-- " + node.value + " -->";
    return new RenderResult(node, html);
  };

  HtmlRender.prototype.renderContentElement = function(node, shadowOnly, excludeNodes) {
    var child, foundNode, host, i, j, len, len1, ref, ref1, renderResult, renderResults, selector;
    renderResults = [];
    host = this.getHost(node);
    selector = node.attr('select');
    if (selector) {
      ref = host.select(">" + selector);
      for (i = 0, len = ref.length; i < len; i++) {
        foundNode = ref[i];
        if (foundNode.nodeType === 'comment') {
          continue;
        }
        if (indexOf.call(excludeNodes, foundNode) >= 0) {
          continue;
        }
        renderResult = this.renderNode(foundNode, shadowOnly, excludeNodes);
        renderResults.push(renderResult);
        this.markAsExcluded(foundNode, excludeNodes);
      }
    } else {
      ref1 = host.children;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        child = ref1[j];
        if (child.nodeType === 'comment') {
          continue;
        }
        if (indexOf.call(excludeNodes, child) >= 0) {
          continue;
        }
        renderResult = this.renderNode(child, shadowOnly, excludeNodes);
        renderResults.push(renderResult);
        this.markAsExcluded(child, excludeNodes);
      }
    }
    return renderResults;
  };

  HtmlRender.prototype.markAsExcluded = function(node, excludeNodes) {
    var child, i, len, ref;
    excludeNodes.push(node);
    ref = node.children;
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      this.markAsExcluded(child, excludeNodes);
    }
  };

  HtmlRender.prototype.getHost = function(node) {
    var context;
    context = node;
    while (context = context.parent) {
      if (context.host) {
        return context.host;
      }
    }
    console.error('not found host node for <content>', node);
  };

  return HtmlRender;

})();

RenderResult = (function() {
  function RenderResult(node1, html1) {
    this.node = node1;
    this.html = html1;
    this.children = [];
    return;
  }

  RenderResult.prototype.toString = function() {
    return this.html;
  };

  RenderResult.prototype.appendChild = function(renderResult) {
    this.children.push(renderResult);
  };

  return RenderResult;

})();

//# sourceMappingURL=html-render.js.map
