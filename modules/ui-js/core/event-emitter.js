// Generated by CoffeeScript 1.10.0
var EventEmitter;

module.exports = EventEmitter = (function() {
  function EventEmitter() {}

  EventEmitter.prototype.on = function(type, handler) {
    var allHandlers, handlers;
    allHandlers = this.eventHandlers_ != null ? this.eventHandlers_ : this.eventHandlers_ = {};
    handlers = allHandlers[type] || (allHandlers[type] = []);
    handlers.push(handler);
    return this;
  };

  EventEmitter.prototype.one = function(type, handler) {
    var self, wrapper;
    self = this;
    wrapper = function() {
      var returns;
      returns = handler.apply(this, arguments);
      self.off(type, wrapper);
      return returns;
    };
    this.on(type, wrapper);
    return this;
  };

  EventEmitter.prototype.off = function(type, handler) {
    var allHandlers, handlers;
    if (!this.eventHandlers_) {
      return;
    }
    allHandlers = this.eventHandlers_;
    handlers = allHandlers[type];
    if (!handlers) {
      return;
    }
    if (!handler) {
      delete allHandlers[type];
    } else {
      handlers = handlers.filter(function(setHandler) {
        return setHandler !== handler;
      });
      allHandlers[type] = handlers;
    }
    return this;
  };

  EventEmitter.prototype.emit = function(type, data) {
    var handler, handlers, i, len, ref;
    if (!this.eventHandlers_) {
      return;
    }
    handlers = this.eventHandlers_[type];
    if (!handlers) {
      return;
    }
    ref = handlers.slice();
    for (i = 0, len = ref.length; i < len; i++) {
      handler = ref[i];
      handler(data);
    }
    return this;
  };

  EventEmitter.prototype.hasEventHandlers = function(type) {
    var ref, ref1;
    if (!((ref = this.eventHandlers_) != null ? ref[type] : void 0)) {
      return false;
    }
    return ((ref1 = this.eventHandlers_) != null ? ref1[type].length : void 0) > 0;
  };

  EventEmitter.prototype.removeAllEventHandlers = function() {
    delete this.eventHandlers_;
  };

  return EventEmitter;

})();

//# sourceMappingURL=event-emitter.js.map
