// Generated by CoffeeScript 1.10.0
var Component, DOM, Directive, ShadowStyle, Tree,
  hasProp = {}.hasOwnProperty;

DOM = require('ui-js/dom');

ShadowStyle = require('./shadow-style');

Directive = require('./directive');

Tree = require('./tree');

module.exports = Component = (function() {
  var componentsById, lastId;

  function Component() {}

  componentsById = {};

  Component.selector = '';

  Component.template = '';

  Component.styles = [];

  Component.components = [];

  Component.directives = [];

  Component.attrs = [];

  Component.tree = null;

  Component.initedComponents = null;

  Component.styleNode = null;

  Component.compiledTemplate = '';

  Component.id = 0;

  lastId = 0;

  Component.generateId = function() {
    return lastId++;
  };

  Component.create = function(Class) {
    var id, key, ref, value;
    if (componentsById[Class.id]) {
      return Class;
    }
    for (key in this) {
      if (!hasProp.call(this, key)) continue;
      value = this[key];
      Class[key] = Class[key] || value;
    }
    if (Class.prototype) {
      ref = this.prototype;
      for (key in ref) {
        value = ref[key];
        if (key !== 'constructor') {
          Class.prototype[key] = value;
        }
      }
    }
    id = this.generateId();
    Class.id = id;
    componentsById[id] = Class;
    Class.initedComponents = [];
    Class.compile();
    return Class;
  };

  Component.compileComponents = function(components) {
    var CompiledComponent, compiledComponents, component, i, key, len, value;
    compiledComponents = [];
    for (i = 0, len = components.length; i < len; i++) {
      component = components[i];
      if (typeof component === 'function') {
        CompiledComponent = Component.create(component);
        compiledComponents.push(CompiledComponent);
      } else {
        for (key in component) {
          if (!hasProp.call(component, key)) continue;
          value = component[key];
          CompiledComponent = Component.create(value);
          compiledComponents.push(CompiledComponent);
        }
      }
    }
    return compiledComponents;
  };

  Component.compile = function() {
    this.components = Component.compileComponents(this.components);
    this.directives = Directive.compileDirectives(this.directives);
    this.compileStyles();
    this.compileTemplate();
  };

  Component.compileTemplate = function() {
    var templateNode;
    templateNode = DOM.createElement('root');
    templateNode.html(this.template);
    this.tree = new Tree(templateNode, this);
    this.compiledTemplate = this.tree.template;
  };

  Component.compileStyles = function() {
    var components, i, len, ref, style, styleGenerator, totalStylesCode;
    if (!this.styles) {
      if (this.styleNode) {
        document.head.removeChild(this.styleNode);
        this.styleNode = null;
        return;
      }
    }
    if (!this.styleNode) {
      this.styleNode = document.createElement('style');
      document.head.appendChild(this.styleNode);
    }
    totalStylesCode = '';
    ref = this.styles;
    for (i = 0, len = ref.length; i < len; i++) {
      style = ref[i];
      styleGenerator = ShadowStyle.compile(style);
      components = ui.components.concat(this.components);
      totalStylesCode += styleGenerator(this.id, components);
    }
    this.styleNode.innerHTML = totalStylesCode;
  };

  Component.getSubComponent = function(node) {
    var component, components, globalComponents, i, len, tag;
    globalComponents = ui.components.filter((function(_this) {
      return function(component) {
        return component !== _this;
      };
    })(this));
    components = globalComponents.concat(this.components);
    for (i = 0, len = components.length; i < len; i++) {
      component = components[i];
      tag = component.selector;
      if (tag === node.tag) {
        return component;
      }
    }
    return null;
  };

  Component.isSubComponent = function(node) {
    return !!this.getSubComponent(node);
  };

  Component.getDirective = function(name) {
    var Dir, i, j, len, len1, ref, ref1;
    ref = this.directives;
    for (i = 0, len = ref.length; i < len; i++) {
      Dir = ref[i];
      if (Dir.attribute === name) {
        return Dir;
      }
    }
    ref1 = ui.directives;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      Dir = ref1[j];
      if (Dir.attribute === name) {
        return Dir;
      }
    }
    return null;
  };

  Component.find = function(node, shadowPrefix) {
    var selector;
    if (shadowPrefix == null) {
      shadowPrefix = false;
    }
    selector = shadowPrefix ? "ui-" + this.selector : this.selector;
    return node.querySelectorAll(selector);
  };

  Component.createTemplateNodes = function() {
    return this.compiledTemplate.clone().children;
  };

  Component.define = function(component, prop, value) {
    Object.defineProperty(component, prop, {
      value: value,
      writable: false,
      enumerable: false,
      configurable: true
    });
  };

  Component.init = function(host, app) {
    var children, component, locals, shadowRoot;
    children = this.createTemplateNodes();
    shadowRoot = host.createShadowRoot(this.id);
    shadowRoot.html(children);
    component = Object.create(this.prototype);
    locals = {};
    this.define(component, 'host', host);
    this.define(component, 'locals', locals);
    this.define(component, 'app', app || component);
    host.component = component;
    component.constructor();
    this.tree.init(shadowRoot, component, locals);
    this.initedComponents.push(component);
    host.one('destroy', (function(_this) {
      return function() {
        var index;
        if (typeof component.destructor === "function") {
          component.destructor();
        }
        index = _this.initedComponents.indexOf(component);
        _this.initedComponents.splice(index, 1);
      };
    })(this));
    return component;
  };

  Component.reloadStyle = function() {
    this.compileStyles();
  };

  Component.reloadTemplate = function() {
    var children, component, host, i, len, locals, ref, shadowRoot;
    this.compileTemplate();
    ref = this.initedComponents.slice();
    for (i = 0, len = ref.length; i < len; i++) {
      component = ref[i];
      host = component.host;
      locals = component.locals;
      host.destroyShadowRoot();
      children = this.createTemplateNodes();
      shadowRoot = host.createShadowRoot(this.id);
      shadowRoot.html(children);
      this.tree.init(shadowRoot, component, locals);
    }
  };

  Component.reload = function() {
    var app, component, host, i, len, ref;
    this.compile();
    ref = this.initedComponents.slice();
    for (i = 0, len = ref.length; i < len; i++) {
      component = ref[i];
      host = component.host;
      app = component.app;
      host.destroy(false);
      host.destroyShadowRoot();
      this.init(host, app);
    }
  };

  Component.prototype.require = function(name) {
    var context, match, optional, ref, ref1;
    match = name.match(/(.+?)(\?)?$/);
    name = match[1];
    optional = !!match[2];
    context = this.host.parent;
    while (context) {
      if (((ref = context.component) != null ? (ref1 = ref.constructor) != null ? ref1.selector : void 0 : void 0) === name) {
        return context.component;
      }
      context = context.parent;
    }
    if (optional) {
      return null;
    }
    throw Error("Not found parent component '" + name + "' required in '" + this.constructor.selector + "'");
  };

  Component.prototype.emit = function(eventName, event) {
    this.host.emit(eventName, event);
  };

  Component.prototype.on = function(eventName, handler) {
    this.host.on(eventName, handler);
  };

  Component.prototype.one = function(eventName, handler) {
    this.host.one(eventName, handler);
  };

  Component.prototype.own = function(eventName, handler) {
    this.host.own(eventName, handler);
  };

  Component.prototype.off = function(eventName, handler) {
    this.host.off(eventName, handler);
  };

  Component.prototype.bindClass = function(className, exp) {
    return this.host.bindClass(className, exp, this, this.locals);
  };

  Component.prototype.bind = function(prop, exp) {
    return ui.bind(this, prop, this, exp, this.locals);
  };

  Component.prototype.watch = function(prop, handler) {
    return ui.watch(this, prop, handler, null, false);
  };

  return Component;

})();

//# sourceMappingURL=component.js.map
