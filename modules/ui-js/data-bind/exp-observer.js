// Generated by CoffeeScript 1.10.0
var Exp, ExpObserver, PathObserver;

PathObserver = require('./path-observer');

Exp = require('./exp');

module.exports = ExpObserver = (function() {
  function ExpObserver(context1, exp, handler, locals, init) {
    var i, len, path, ref;
    this.context = context1;
    this.exp = exp;
    this.handler = handler;
    this.locals = locals != null ? locals : null;
    if (init == null) {
      init = false;
    }
    this.exp = new Exp(this.exp);
    this.destroyed = false;
    this.observers = [];
    this.value = void 0;
    ref = this.exp.paths;
    for (i = 0, len = ref.length; i < len; i++) {
      path = ref[i];
      this.observers.push(this.createObserver(this.context, path));
      if (this.locals) {
        this.observers.push(this.createObserver(this.locals, path));
      }
    }
    if (init) {
      this.handler(this.getValue());
    }
    return;
  }

  ExpObserver.prototype.getValue = function() {
    return this.exp(this.context, this.locals);
  };

  ExpObserver.prototype.createObserver = function(context, path) {
    return new PathObserver(context, path, (function(_this) {
      return function() {
        var oldValue;
        oldValue = _this.value;
        _this.value = _this.getValue();
        if ((oldValue !== oldValue) && (_this.value !== _this.value)) {
          return;
        }
        if (oldValue !== _this.value) {
          _this.handler(_this.value);
        }
      };
    })(this));
  };

  ExpObserver.prototype.destroy = function() {
    var i, len, observer, ref;
    if (this.destroyed) {
      return;
    }
    ref = this.observers;
    for (i = 0, len = ref.length; i < len; i++) {
      observer = ref[i];
      observer.destroy();
    }
    this.destroyed = true;
  };

  return ExpObserver;

})();

//# sourceMappingURL=exp-observer.js.map
