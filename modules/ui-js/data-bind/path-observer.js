// Generated by CoffeeScript 1.10.0
var CallPropObserver, Exp, ExpPropObserver, PathObserver, PropObserver, equals,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

PropObserver = require('./prop-observer');

Exp = require('./exp');

equals = function(a, b) {
  if ((a !== a) && (b !== b)) {
    return true;
  }
  return a === b;
};

module.exports = PathObserver = (function() {
  function PathObserver(context1, path, handler1, rootContext1) {
    this.context = context1;
    this.handler = handler1;
    this.rootContext = rootContext1 != null ? rootContext1 : this.context;
    if (this.context !== Object(this.context)) {
      return;
    }
    this.destroyed = false;
    this.path = path.slice();
    this.accessor = this.path.shift();
    this.accessorObserver = null;
    this.subPathObserver = null;
    if (!this.path.length) {
      this.observeAccessor(this.handler);
    } else {
      this.initSubPathObserver();
      this.observeAccessor((function(_this) {
        return function(newSubContext) {
          return _this.updateSubPathObserver(newSubContext);
        };
      })(this));
    }
    return;
  }

  PathObserver.prototype.observeAccessor = function(handler) {
    this.accessorObserver = (function() {
      switch (this.accessor.type) {
        case 'prop':
          return this.createPropObserver(handler);
        case 'exp':
          return this.createExpPropObserver(handler);
        case 'call':
          return this.createCallPropObserver(handler);
      }
    }).call(this);
  };

  PathObserver.prototype.createPropObserver = function(handler) {
    var name;
    name = this.accessor.name.toString();
    return new PropObserver(this.context, name, handler);
  };

  PathObserver.prototype.createExpPropObserver = function(handler) {
    return new ExpPropObserver(this.rootContext, this.context, this.accessor, handler);
  };

  PathObserver.prototype.createCallPropObserver = function(handler) {
    return new CallPropObserver(this.rootContext, this.context, this.accessor, handler);
  };

  PathObserver.prototype.initSubPathObserver = function() {
    var subContext;
    subContext = this.getByAccessor(this.context, this.accessor);
    this.subPathObserver = new PathObserver(subContext, this.path, this.handler, this.rootContext);
    this.value = this.getByPath(subContext, this.path);
  };

  PathObserver.prototype.updateSubPathObserver = function(newSubContext) {
    var oldValue;
    this.subPathObserver.destroy();
    this.subPathObserver = new PathObserver(newSubContext, this.path, this.handler, this.rootContext);
    oldValue = this.value;
    this.value = this.getByPath(newSubContext, this.path);
    if (!equals(this.value, oldValue)) {
      this.handler(this.value);
    }
  };

  PathObserver.prototype.destroy = function() {
    var ref, ref1;
    if (this.destroyed) {
      return;
    }
    if ((ref = this.subPathObserver) != null) {
      ref.destroy();
    }
    if ((ref1 = this.accessorObserver) != null) {
      ref1.destroy();
    }
    this.destroyed = true;
  };

  PathObserver.prototype.getByAccessor = function(context, accessor) {
    switch (accessor.type) {
      case 'prop':
        return context[accessor.name];
      case 'exp':
        return ExpPropObserver.getValue(this.rootContext, context, accessor);
      case 'call':
        return CallPropObserver.getValue(this.rootContext, context, accessor);
    }
  };

  PathObserver.prototype.getByPath = function(context, path) {
    var accessor, i, len;
    for (i = 0, len = path.length; i < len; i++) {
      accessor = path[i];
      if (context == null) {
        return void 0;
      }
      context = this.getByAccessor(context, accessor);
    }
    return context;
  };

  return PathObserver;

})();

ExpPropObserver = (function() {
  ExpPropObserver.getValue = function(rootContext, context, accessor) {
    var exp, key;
    exp = new Exp(accessor.exp.code);
    key = exp(rootContext);
    return context[key];
  };

  function ExpPropObserver(rootContext, context, accessor, handler) {
    var ExpObserver, exp;
    ExpObserver = require('./exp-observer');
    this.destroyed = false;
    this.oldValue = void 0;
    this.propObserver = null;
    exp = accessor.exp.code;
    this.expObserver = new ExpObserver(rootContext, exp, (function(_this) {
      return function(expValue) {
        var ref;
        if ((ref = _this.propObserver) != null) {
          ref.destroy();
        }
        return _this.propObserver = new PropObserver(context, expValue, function(value) {
          if (!equals(value, _this.oldValue)) {
            _this.oldValue = value;
            return handler(value);
          }
        }, true);
      };
    })(this), null, true);
    return;
  }

  ExpPropObserver.prototype.destroy = function() {
    var ref;
    if (this.destroyed) {
      return;
    }
    if ((ref = this.propObserver) != null) {
      ref.destroy();
    }
    this.expObserver.destroy();
    this.destroyed = true;
  };

  return ExpPropObserver;

})();

CallPropObserver = (function() {
  CallPropObserver.getValue = function(rootContext, context, accessor) {
    var args, argsExp, name;
    name = accessor.name.toString();
    argsExp = new Exp("[" + accessor.exp.code + "]");
    args = argsExp(rootContext);
    return context[name].apply(context, args);
  };

  function CallPropObserver(rootContext1, context1, accessor1, handler1) {
    var ExpObserver, argsExp, name;
    this.rootContext = rootContext1;
    this.context = context1;
    this.accessor = accessor1;
    this.handler = handler1;
    this.change = bind(this.change, this);
    ExpObserver = require('./exp-observer');
    this.destroyed = false;
    this.oldValue = void 0;
    name = this.accessor.name.toString();
    this.funcObserver = new PropObserver(this.context, name, this.change);
    argsExp = "[" + this.accessor.exp.code + "]";
    this.argsObserver = new ExpObserver(this.rootContext, argsExp, this.change);
    return;
  }

  CallPropObserver.prototype.change = function() {
    var value;
    value = CallPropObserver.getValue(this.rootContext, this.context, this.accessor);
    if (!equals(value, this.oldValue)) {
      this.oldValue = value;
      this.handler(value);
    }
  };

  CallPropObserver.prototype.destroy = function() {
    if (this.destroyed) {
      return;
    }
    this.funcObserver.destroy();
    this.argsObserver.destroy();
    this.destroyed = true;
  };

  return CallPropObserver;

})();

//# sourceMappingURL=path-observer.js.map
