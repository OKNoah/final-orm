// Generated by CoffeeScript 1.10.0
var ArrayObserver, ArraySplice, DirectArrayObserver, PropObserver, arraySplice, immediate,
  slice = [].slice;

ArraySplice = require('./array-splice');

PropObserver = require('./prop-observer');

immediate = require('ui-js/polyfill/immediate');

arraySplice = new ArraySplice();

DirectArrayObserver = (function() {
  var patchMethods;

  function DirectArrayObserver(arr1) {
    this.arr = arr1;
    this.handlers = [];
    this.destroyed = false;
    this.indexChangeHandlers = true;
    this.indexObservers = [];
    this.patch();
    return;
  }

  DirectArrayObserver.prototype.destroy = function() {
    if (this.destroyed) {
      return;
    }
    this.destroyed = true;
    this.unpatch();
  };

  DirectArrayObserver.prototype.patch = function() {
    var key, method;
    this.arr.observer = this;
    for (key in patchMethods) {
      method = patchMethods[key];
      this.arr[key] = method;
    }
    this.updateIndexObservers();
  };

  DirectArrayObserver.prototype.unpatch = function() {
    var key, method;
    delete this.arr.observer;
    for (key in patchMethods) {
      method = patchMethods[key];
      delete this.arr[key];
    }
    this.destroyIndexObservers();
  };

  DirectArrayObserver.prototype.createSplice = function(index, removedCnt, add) {
    var addedCount, removed;
    removed = this.arr.slice(index, index + removedCnt);
    addedCount = add != null ? add.length : 0;
    if (!addedCount && !removedCnt) {
      return null;
    }
    return {
      index: index,
      addedCount: addedCount,
      removed: removed
    };
  };

  DirectArrayObserver.prototype.callMethod = function(method, args, index, removedCnt, add) {
    var returns, splice;
    this.indexChangeHandlers = false;
    splice = this.createSplice(index, removedCnt, add);
    returns = Array.prototype[method].apply(this.arr, args);
    this.indexChangeHandlers = true;
    if (splice) {
      this.arrayWasChange([splice]);
    }
    return returns;
  };

  DirectArrayObserver.prototype.arrayWasChange = function(splices) {
    this.updateIndexObservers();
    this.callHandlers(splices);
  };

  DirectArrayObserver.prototype.callHandlers = function(splices) {
    var handler, i, len, ref;
    ref = this.handlers;
    for (i = 0, len = ref.length; i < len; i++) {
      handler = ref[i];
      handler(splices);
    }
  };

  DirectArrayObserver.prototype.addHandler = function(handler) {
    this.handlers.push(handler);
  };

  DirectArrayObserver.prototype.removeHandler = function(handler) {
    var index;
    index = this.handlers.indexOf(handler);
    if (index !== -1) {
      this.handlers.splice(index, 1);
    }
    if (!this.handlers.length) {
      this.destroy();
    }
  };

  DirectArrayObserver.prototype.updateIndexObservers = function() {
    var count, currentLength, fn, i, index, j, k, len, observer, observers, olaLength, ref, ref1, ref2, ref3;
    olaLength = this.indexObservers.length;
    currentLength = this.arr.length;
    if (currentLength < olaLength) {
      count = olaLength - currentLength;
      observers = this.indexObservers.splice(currentLength, count);
      for (i = 0, len = observers.length; i < len; i++) {
        observer = observers[i];
        observer.destroy();
      }
      for (index = j = ref = currentLength, ref1 = olaLength; ref <= ref1 ? j < ref1 : j > ref1; index = ref <= ref1 ? ++j : --j) {
        delete this.arr[index];
      }
    } else if (currentLength > olaLength) {
      fn = (function(_this) {
        return function(index) {
          return _this.indexObservers.push(new PropObserver(_this.arr, index, function(value, oldValue) {
            return _this.indexChange(index, oldValue);
          }));
        };
      })(this);
      for (index = k = ref2 = olaLength, ref3 = currentLength; ref2 <= ref3 ? k < ref3 : k > ref3; index = ref2 <= ref3 ? ++k : --k) {
        fn(index);
      }
    }
    this.arr.length = currentLength;
  };

  DirectArrayObserver.prototype.destroyIndexObservers = function() {
    var i, len, observer, ref;
    ref = this.indexObservers;
    for (i = 0, len = ref.length; i < len; i++) {
      observer = ref[i];
      observer.destroy();
    }
  };

  DirectArrayObserver.prototype.indexChange = function(index, oldValue) {
    var splice;
    if (!this.indexChangeHandlers) {
      return;
    }
    splice = {
      index: index,
      addedCount: 1,
      removed: [oldValue]
    };
    this.callHandlers([splice]);
  };

  patchMethods = {
    splice: function() {
      var add, index, removedCnt;
      index = arguments[0], removedCnt = arguments[1], add = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      return this.observer.callMethod('splice', arguments, index, removedCnt, add);
    },
    push: function() {
      var add;
      add = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.observer.callMethod('push', arguments, this.length, 0, add);
    },
    pop: function() {
      if (!this.length) {
        return;
      }
      return this.observer.callMethod('pop', arguments, this.length - 1, 1, []);
    },
    unshift: function() {
      var add;
      add = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.observer.callMethod('unshift', arguments, 0, 0, add);
    },
    shift: function() {
      if (!this.length) {
        return;
      }
      return this.observer.callMethod('shift', arguments, 0, 1, []);
    },
    sort: function() {
      var oldArr, returns, splices;
      this.indexChangeHandlers = false;
      oldArr = this.slice();
      returns = Array.prototype.sort.call(this, arguments);
      splices = ArrayObserver.diff(this, oldArr);
      this.indexChangeHandlers = true;
      if (splices.length) {
        this.observer.arrayWasChange(splices);
      }
      return returns;
    }
  };

  return DirectArrayObserver;

})();

module.exports = ArrayObserver = (function() {
  ArrayObserver.diff = function(arr, oldArr) {
    return arraySplice.calculateSplices(arr, oldArr);
  };

  function ArrayObserver(array, handler1) {
    var directObserver;
    this.array = array;
    this.handler = handler1;
    this.destroyed = false;
    if (!this.array.observer) {
      new DirectArrayObserver(this.array);
    }
    directObserver = this.array.observer;
    directObserver.addHandler(this.handler);
    return;
  }

  ArrayObserver.prototype.destroy = function() {
    var directObserver;
    if (this.destroyed) {
      return;
    }
    directObserver = this.array.observer;
    directObserver.removeHandler(this.handler);
    this.destroyed = true;
  };

  return ArrayObserver;

})();

//# sourceMappingURL=array-observer.js.map
