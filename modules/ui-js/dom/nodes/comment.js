// Generated by CoffeeScript 1.10.0
var Comment, Node,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Node = require('./node');

module.exports = Comment = (function(superClass) {
  extend(Comment, superClass);

  Object.defineProperty(Comment.prototype, 'value', {
    get: function() {
      return this.value_;
    },
    set: function(value) {
      return this.setValue(value);
    }
  });

  function Comment(value_) {
    this.value_ = value_ != null ? value_ : '';
    Comment.__super__.constructor.apply(this, arguments);
    this.nodeType = 'comment';
    return;
  }

  Comment.prototype.setValue = function(value) {
    this.value_ = value + '';
    this.mutate();
  };

  Comment.prototype.clone = function() {
    return new this.constructor(this.value);
  };

  return Comment;

})(Node);

//# sourceMappingURL=comment.js.map
