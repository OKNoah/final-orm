// Generated by CoffeeScript 1.10.0
var Element, Input, InputMutation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

Element = require('./element');

InputMutation = require('../mutations/input-mutation');

module.exports = Input = (function(superClass) {
  extend(Input, superClass);

  Object.defineProperty(Input.prototype, 'type', {
    get: function() {
      return this.type_;
    },
    set: function(type) {
      return this.setType(type);
    },
    configurable: true
  });

  Object.defineProperty(Input.prototype, 'value', {
    get: function() {
      return this.value_;
    },
    set: function(value) {
      return this.setValue(value);
    },
    configurable: true
  });

  Object.defineProperty(Input.prototype, 'multiple', {
    get: function() {
      return this.multiple_;
    },
    set: function(value) {
      return this.setMultiple(value);
    },
    configurable: true
  });

  function Input() {
    Input.__super__.constructor.apply(this, arguments);
    this.value = '';
    this.type = this.attr('type');
    this.multiple_ = this.attr('multiple');
    return;
  }

  Input.prototype.setMultiple = function(value) {
    this.multiple_ = !!value;
    if (this.multiple_) {
      this.attr('multiple', 'true');
    } else {
      this.removeAttr('multiple');
    }
  };

  Input.prototype.reset = function() {
    this.setDefaultValue_();
    this.mutate(function(mutation) {
      return mutation.needReset();
    });
    this.emit('change');
  };

  Input.prototype.setDefaultValue_ = function() {
    switch (this.type_) {
      case 'text':
        this.value_ = '';
        break;
      case 'password':
        this.value_ = '';
        break;
      case 'checkbox':
        this.value_ = false;
        break;
      case 'file':
        if (this.value_ instanceof Array) {
          this.value_.splice(0, this.value_.length);
        } else {
          this.value_ = [];
        }
    }
  };

  Input.prototype.normalizeType_ = function(type) {
    if (type !== 'text' && type !== 'password' && type !== 'checkbox' && type !== 'file') {
      type = 'text';
    }
    return type;
  };

  Input.prototype.setType = function(type) {
    this.type_ = this.normalizeType_(type);
    this.setDefaultValue_();
    this.attr('type', this.type_);
  };

  Input.prototype.setFiles = function(fileList) {
    var ref;
    (ref = this.value_).splice.apply(ref, [0, this.value_.length].concat(slice.call(fileList)));
  };

  Input.prototype.setValue = function(value) {
    switch (this.type_) {
      case 'text':
        this.value_ = value + '';
        break;
      case 'password':
        this.value_ = value + '';
        break;
      case 'checkbox':
        this.value_ = !!value;
        break;
      case 'file':
        return;
    }
    this.mutate(function(mutation) {
      return mutation.changeValue();
    });
  };

  Input.prototype.createMutation = function() {
    return new InputMutation(this);
  };

  Input.prototype.append = function() {
    throw Error('<input> element cannot have child nodes');
  };

  Input.prototype.prepend = function() {
    throw Error('input element cannot have children');
  };

  return Input;

})(Element);

//# sourceMappingURL=input.js.map
