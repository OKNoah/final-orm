// Generated by CoffeeScript 1.10.0
var Element, ElementMutation, ExpObserver, Node, Selector, ShadowRoot, Style,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  slice = [].slice;

Node = require('./node');

Selector = require('../core/selector');

ElementMutation = require('../mutations/element-mutation');

ExpObserver = require('ui-js/data-bind/exp-observer');

Style = require('../core/style');

module.exports = Element = (function(superClass) {
  extend(Element, superClass);

  function Element(tag, attrs) {
    Element.__super__.constructor.apply(this, arguments);
    this.tag = tag.toLowerCase();
    this.nodeType = 'element';
    this.style = new Style(this);
    this.attrs = {};
    this.classes = [];
    this.shadowRoot = null;
    if (attrs) {
      this.attr(attrs);
    }
    return;
  }

  Element.prototype.calcStyle = function() {
    if (!this.realNode) {
      return null;
    }
    return getComputedStyle(this.realNode);
  };

  Element.prototype.toEm = function(px) {
    var fontSize, style;
    style = this.calcStyle();
    if (!style) {
      return 0;
    }
    fontSize = parseFloat(style.fontSize);
    return px / fontSize;
  };

  Element.prototype.toPx = function(em) {
    var fontSize, style;
    style = this.calcStyle();
    if (!style) {
      return 0;
    }
    fontSize = parseFloat(style.fontSize);
    return em * fontSize;
  };

  Element.prototype.renderStyle = function() {
    var style;
    style = this.style.toString();
    this.realNode.setAttribute('style', style);
    this.realNode.offsetHeight;
  };

  Element.prototype.own = function(eventName, handler) {
    this.on(eventName, function(event) {
      if (event.own) {
        handler(event);
      }
    });
  };

  Element.prototype.width = function(toEm) {
    var width;
    if (toEm == null) {
      toEm = false;
    }
    if (!this.realNode) {
      return 0;
    }
    width = this.realNode.offsetWidth;
    if (toEm) {
      width = this.toEm(width);
    }
    return width;
  };

  Element.prototype.height = function(toEm) {
    var height;
    if (toEm == null) {
      toEm = false;
    }
    if (!this.realNode) {
      return 0;
    }
    height = this.realNode.offsetHeight;
    if (toEm) {
      height = this.toEm(height);
    }
    return height;
  };

  Element.prototype.rect = function() {
    var rect;
    if (!this.realNode) {
      return {
        width: 0,
        height: 0,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      };
    }
    rect = this.realNode.getBoundingClientRect();
    return {
      width: rect.width,
      height: rect.height,
      left: rect.left,
      right: rect.right,
      top: rect.top,
      bottom: rect.bottom
    };
  };

  Element.prototype.bindClass = function(className, exp, context, scope) {
    return new ExpObserver(context, exp, (function(_this) {
      return function(value) {
        if (value) {
          return _this.addClass(className);
        } else {
          return _this.removeClass(className);
        }
      };
    })(this), scope, true);
  };

  Element.prototype.addClass = function(className) {
    if (indexOf.call(this.classes, className) < 0) {
      this.classes.push(className);
      this.attr('class', this.classes.join(' '));
    }
  };

  Element.prototype.removeClass = function(className) {
    var index;
    index = this.classes.indexOf(className);
    if (index !== -1) {
      this.classes.splice(index, 1);
      if (this.classes.length) {
        this.attr('class', this.classes.join(' '));
      } else {
        this.removeAttr('class');
      }
    }
  };

  Element.prototype.hasClass = function(className) {
    return this.classes.indexOf(className) !== -1;
  };

  Element.prototype.toggleClass = function(className) {
    if (this.hasClass(className)) {
      this.removeClass(className);
    } else {
      this.addClass(className);
    }
  };

  Element.prototype.css = function(rules) {
    var prop, value;
    if (arguments.length === 2) {
      this.style[arguments[0]] = arguments[1];
      return;
    }
    for (prop in rules) {
      if (!hasProp.call(rules, prop)) continue;
      value = rules[prop];
      this.style[prop] = value;
    }
  };

  Element.prototype.renderCss = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    this.css.apply(this, args);
    this.renderStyle();
  };

  Element.prototype.attr = function(name, value) {
    var key;
    if (arguments.length === 1) {
      if (typeof name !== 'object') {
        return this.attrs[name];
      }
      for (key in name) {
        value = name[key];
        this.attr(key, value);
      }
      return;
    }
    this.attrs[name] = value;
    if (name === 'class') {
      this.classes = (value + '').split(/\s+/);
    }
    this.mutate(function(mutation) {
      return mutation.changeAttribute(name);
    });
    return value;
  };

  Element.prototype.hasAttr = function(name) {
    return this.attrs.hasOwnProperty(name);
  };

  Element.prototype.removeAttr = function(name) {
    delete this.attrs[name];
    if (name === 'class') {
      this.classes = [];
    }
    this.mutate(function(mutation) {
      return mutation.removeAttribute(name);
    });
  };

  Element.prototype.eachAttrs = function(handler) {
    var key, ref, value;
    ref = this.attrs;
    for (key in ref) {
      value = ref[key];
      handler(key, value);
    }
  };

  Element.prototype.createMutation = function() {
    return new ElementMutation(this);
  };

  Element.prototype.clone = function() {
    var child, element, i, len, ref;
    element = new this.constructor(this.tag, this.attrs);
    ref = this.children;
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      element.append(child.clone());
    }
    if (this.shadowRoot) {
      element.shadowRoot = this.shadowRoot.clone(element);
    }
    return element;
  };

  Element.prototype.html = function(html) {
    var Dom, child, i, len, newChildren, ref;
    if (html instanceof Array) {
      newChildren = html;
    } else {
      Dom = require('ui-js/dom');
      newChildren = Dom.parse(html);
    }
    this.empty();
    ref = newChildren.slice();
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      this.append(child);
    }
  };

  Element.prototype.createShadowRoot = function(shadowId) {
    this.shadowRoot = new ShadowRoot(this, shadowId);
    return this.shadowRoot;
  };

  Element.prototype.destroyShadowRoot = function() {
    this.shadowRoot.destroy();
    this.shadowRoot = null;
  };

  Element.prototype.select = function(selector) {
    return new Selector(selector).select(this);
  };

  Element.prototype.selectOne = function(selector) {
    return this.select(selector)[0];
  };

  return Element;

})(Node);

ShadowRoot = (function(superClass) {
  extend(ShadowRoot, superClass);

  function ShadowRoot(host1, shadowId1) {
    this.host = host1;
    this.shadowId = shadowId1 != null ? shadowId1 : Math.random().toString().slice(2);
    ShadowRoot.__super__.constructor.call(this, '[[shadow-root]]');
    return;
  }

  ShadowRoot.prototype.clone = function(host) {
    var child, i, len, ref, shadowRoot;
    shadowRoot = new ShadowRoot(host, this.shadowId);
    ref = this.children;
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      shadowRoot.append(child.clone());
    }
    return shadowRoot;
  };

  return ShadowRoot;

})(Element);

//# sourceMappingURL=element.js.map
