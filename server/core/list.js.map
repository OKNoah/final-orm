{"version":3,"sources":["list.es6"],"names":[],"mappings":"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","file":"list.js","sourcesContent":["import {Model, Instance, Collection, Index, Property, ObjectID} from 'iridium'\r\nimport db from './db'\r\nimport server from \"./server\"\r\n\r\n\r\nexport class List extends Model {\r\n\r\n\tconstructor(InstanceClass, ApiClass) {\r\n\t\tsuper(db, InstanceClass)\r\n\t\tif (ApiClass) {\r\n\t\t\tlet api = new ApiClass(this)\r\n\t\t\tserver.addApi(api)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tasync add(data) {\r\n\t\treturn this.insert(data)\r\n\t}\r\n\r\n\r\n\tasync slice(skip = 0, limit = 100) {\r\n\t\tlimit = Math.max(0, Math.min(limit, 100))\r\n\t\tlet cursor = this.find()\r\n\t\tlet count = await cursor.count()\r\n\t\tlet documents = await cursor.skip(skip).limit(limit).toArray()\r\n\r\n\t\treturn {\r\n\t\t\tdocuments: documents,\r\n\t\t\tcount: count\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport class Item extends Instance {\r\n\r\n\t// @Property(true)\r\n\t// name:\r\n\t//\r\n\t// @Property(])\r\n\t// friends\r\n\r\n\tset(data, ...props) {\r\n\t\tprops.forEach(prop => {\r\n\t\t\tlet value = data[prop]\r\n\t\t\tif (prop in data) this[prop] = value\r\n\t\t})\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport class Api extends null {\r\n\r\n\tconstructor(list) {\r\n\t\tsuper()\r\n\t\tthis.list = list\r\n\t}\r\n\r\n\r\n\tstatic getMethodNames(api) {\r\n\t\tlet names = []\r\n\t\tlet context = api\r\n\t\twhile (context) {\r\n\t\t\tlet ownNames = Object.getOwnPropertyNames(context)\r\n\r\n\t\t\tfor (let i = 0; i < ownNames.length; i++) {\r\n\t\t\t\tlet ownName = ownNames[i]\r\n\t\t\t\tif (names.indexOf(ownName) !== -1) continue\r\n\t\t\t\tif (ownName === 'constructor') continue\r\n\t\t\t\tif (typeof api[ownName] !== 'function') continue\r\n\t\t\t\tnames.push(ownName)\r\n\t\t\t}\r\n\r\n\t\t\tcontext = Object.getPrototypeOf(context)\r\n\t\t}\r\n\r\n\t\treturn names\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport class ListApi extends Api {\r\n\r\n\r\n\tasync slice(data) {\r\n\t\tlet skip = data.skip\r\n\t\tlet limit = data.limit\r\n\t\tlet result = await this.list.slice(skip, limit)\r\n\t\tlet count = result.count\r\n\t\tlet documents = result.documents.map(document => document.toJSON())\r\n\r\n\t\treturn {\r\n\t\t\tcount: count,\r\n\t\t\tdocuments: documents\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tasync add(data) {\r\n\t\tlet document = await this.list.add(data)\r\n\t\treturn document.toJSON()\r\n\t}\r\n\r\n\r\n\tasync remove(data) {\r\n\t\tlet _id = data._id\r\n\t\treturn this.list.remove({_id: _id})\r\n\t}\r\n\r\n\r\n\tasync save(data, ...propNames) {\r\n\t\tlet instance = await this.list.get(data._id)\r\n\t\tinstance.set(data, ...propNames)\r\n\t\tawait instance.save()\r\n\t\treturn instance.toJSON()\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n"]}