{"version":3,"sources":["field-enum.es6"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;IAGqB,S;;;AAGpB,oBAAY,QAAZ,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,OAAlC,EAA6D;AAAA,MAAlB,QAAkB,yDAAP,KAAO;;AAAA;;AAAA,2FACtD,QADsD,EAC5C,IAD4C,EACtC,OADsC,EAC7B,QAD6B;;AAE5D,QAAK,IAAL,GAAY,IAAZ;AACA,QAAK,SAAL,CAAe,IAAf;AAH4D;AAI5D;;;;4BAGS,I,EAAM;AACf,OAAI,SAAS,OAAb,EAAsB;AACtB,OAAI,SAAS,MAAb,EAAqB;AACrB,OAAI,SAAS,MAAb,EAAqB;AACrB,OAAI,SAAS,IAAb,EAAmB;AACnB,OAAI,SAAS,GAAb,EAAkB;;AAElB,OAAI,CAAC,KAAK,SAAL,CAAe,MAApB,EAA4B;AAC3B,UAAM,yBAAsB,KAAK,IAA3B,oCAAN;AACA;AACD,OAAI,CAAC,KAAK,QAAV,EAAoB;AACnB,UAAM,yBAAsB,KAAK,IAA3B,6CAAN;AACA;AACD;;;2BAGQ,I,EAAM,Q,EAAU;AACxB,OAAI,KAAK,QAAT,EAAmB;;AAEnB,OAAI,QAAQ,KAAK,SAAL,CAAe,IAAf,CAAZ;AACA,OAAI,CAAC,KAAK,aAAL,CAAmB,KAAnB,EAA0B,QAA1B,CAAL,EAA0C;AACzC,SAAK,SAAL,CAAe,KAAK,IAApB,EAA0B,KAA1B,EAAiC,QAAjC;AACA;AACD;;;gCAGa,K,EAAO,Q,EAAU;AAC9B,OAAI,OAAO,KAAK,IAAhB;AACA,OAAI,UAAU,KAAK,OAAnB;;AAEA,OAAI,UAAU,OAAd,EAAuB;AACtB,SAAK,YAAL,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC,QAAlC;AACA;;AAED,WAAQ,IAAR;AACC,SAAK,MAAL;AACC,YAAO,KAAK,cAAL,CAAoB,KAApB,EAA2B,OAA3B,EAAoC,QAApC,CAAP;AACD,SAAK,MAAL;AACC,YAAO,KAAK,cAAL,CAAoB,KAApB,EAA2B,OAA3B,EAAoC,QAApC,CAAP;AACD,SAAK,OAAL;AACC,YAAO,OAAO,KAAP,KAAiB,SAAxB;AACD,SAAK,GAAL;AACC,YAAO,KAAK,WAAL,CAAiB,KAAjB,EAAwB,OAAxB,EAAiC,QAAjC,CAAP;AACD;AACC,YAAO,iBAAiB,IAAxB;AAVF;AAaA;;;iCAGc,K,EAAO,O,EAAS,Q,EAAU;AACxC,OAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAP;;AAE/B,OAAI,CAAC,OAAO,QAAP,CAAgB,KAAhB,CAAL,EAA6B;AAC5B,SAAK,UAAL,sCAAmD,KAAnD,EAA4D,QAA5D;AACA;AACD,OAAI,SAAS,OAAb,EAAsB,IAAI,QAAQ,QAAQ,GAApB,EAAyB;AAC9C,SAAK,UAAL,4BAAyC,QAAQ,GAAjD,mBAAkE,KAAlE,EAA2E,QAA3E;AACA;AACD,OAAI,SAAS,OAAb,EAAsB,IAAI,QAAQ,QAAQ,GAApB,EAAyB;AAC9C,SAAK,UAAL,4BAAyC,QAAQ,GAAjD,mBAAkE,KAAlE,EAA2E,QAA3E;AACA;AACD,UAAO,IAAP;AACA;;;iCAGc,K,EAAO,O,EAAS,Q,EAAU;AACxC,OAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAP;;AAE/B,OAAI,UAAU,OAAd,EAAuB,IAAI,CAAC,QAAQ,IAAR,CAAa,IAAb,CAAkB,KAAlB,CAAL,EAA+B;AACrD,SAAK,UAAL,yBAAsC,QAAQ,IAA9C,qBAAiE,KAAjE,SAA2E,QAA3E;AACA;AACD,OAAI,SAAS,OAAb,EAAsB,IAAI,MAAM,MAAN,GAAe,QAAQ,GAA3B,EAAgC;AACrD,SAAK,UAAL,mCAAgD,QAAQ,GAAxD,6BAAkF,KAAlF,SAA4F,QAA5F;AACA;AACD,OAAI,SAAS,OAAb,EAAsB,IAAI,MAAM,MAAN,GAAe,QAAQ,GAA3B,EAAgC;AACrD,SAAK,UAAL,mCAAgD,QAAQ,GAAxD,6BAAkF,KAAlF,SAA4F,QAA5F;AACA;AACD,UAAO,IAAP;AACA;;;+BAGY,K,EAAO,O,EAAS,Q,EAAU;AACtC,OAAI,QAAQ,QAAQ,IAApB;AACA,OAAI,MAAM,OAAN,CAAc,KAAd,MAAyB,CAAC,CAA9B,EAAiC;AAChC,QAAI,WAAW,KAAK,SAAL,CAAe,KAAf,CAAf;AACA,QAAI,YAAY,KAAK,aAAL,CAAmB,KAAnB,CAAhB;AACA,QAAI,mCAAiC,QAAjC,mBAAuD,SAA3D;AACA,SAAK,UAAL,CAAgB,OAAhB,EAAyB,QAAzB;AACA;AACD;;;8BAGW,K,EAAO,O,EAAS,Q,EAAU;AAAA;;AACrC,OAAI,EAAE,iBAAiB,GAAnB,CAAJ,EAA6B,OAAO,KAAP;AAC7B,OAAI,SAAS,OAAb,EAAsB;AAAA;AACrB,SAAI,OAAO,QAAQ,GAAnB;AACA,WAAM,OAAN,CAAc,gBAAQ;AACrB,UAAI,KAAK,OAAL,CAAa,IAAb,MAAuB,CAAC,CAA5B,EAA+B;AAC9B,WAAI,UAAU,KAAK,SAAL,CAAe,IAAf,CAAd;AACA,WAAI,YAAY,OAAK,aAAL,CAAmB,IAAnB,CAAhB;AACA,WAAI,2CAAyC,OAAzC,mBAA8D,SAAlE;AACA,cAAK,UAAL,CAAgB,OAAhB,EAAyB,QAAzB;AACA;AACD,MAPD;AAFqB;AAUrB;AACD,UAAO,IAAP;AACA;;;sCAGmB,K,EAAO;AAC1B,OAAI,SAAS,IAAb,EAAmB,OAAO,KAAP;AACnB,OAAI,OAAO,KAAK,IAAhB;;AAEA,WAAQ,IAAR;AACC,SAAK,MAAL;AACC,YAAO,OAAO,KAAP,CAAP;AACD,SAAK,MAAL;AACC,YAAO,OAAO,KAAP,CAAP;AACD,SAAK,OAAL;AACC,YAAO,QAAQ,KAAR,CAAP;AACD,SAAK,IAAL;AACC,YAAO,IAAI,IAAJ,CAAS,KAAT,CAAP;AACD,SAAK,GAAL;AACC,YAAO,IAAI,GAAJ,CAAQ,KAAR,CAAP;AAVF;;AAaA,UAAO,KAAK,QAAL,CAAc,KAAd,CAAP;AACA;;;yCAGsB,K,EAAO;AAC7B,OAAI,SAAS,IAAb,EAAmB,OAAO,KAAP;;AAEnB,WAAQ,KAAK,IAAb;AACC,SAAK,MAAL;AACC,YAAO,KAAP;AACD,SAAK,MAAL;AACC,YAAO,KAAP;AACD,SAAK,OAAL;AACC,YAAO,KAAP;AACD,SAAK,IAAL;AACC,YAAO,MAAM,OAAN,EAAP;AACD,SAAK,GAAL;AACC,YAAO,MAAM,IAAN,CAAW,KAAX,CAAP;AAVF;;;AAcA,UAAO,MAAM,MAAN,EAAP;AACA;;;;;;kBA/JmB,S","file":"field-enum.js","sourcesContent":["import Field from './field'\r\n\r\n\r\nexport default class FieldType extends Field {\r\n\r\n\r\n\tconstructor(basePath, path, type, options, internal = false) {\r\n\t\tsuper(basePath, path, options, internal)\r\n\t\tthis.type = type\r\n\t\tthis.checkType(type)\r\n\t}\r\n\r\n\r\n\tcheckType(type) {\r\n\t\tif (type === Boolean) return\r\n\t\tif (type === String) return\r\n\t\tif (type === Number) return\r\n\t\tif (type === Date) return\r\n\t\tif (type === Set) return\r\n\r\n\t\tif (!type.prototype.toJSON) {\r\n\t\t\tthrow Error(`Custom type '${type.name}' must have method 'toJSON'`)\r\n\t\t}\r\n\t\tif (!type.fromJSON) {\r\n\t\t\tthrow Error(`Custom type '${type.name}' must have static method 'fromJSON'`)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tvalidate(data, basePath) {\r\n\t\tif (this.internal) return\r\n\r\n\t\tlet value = this.getByPath(data)\r\n\t\tif (!this.validateValue(value, basePath)) {\r\n\t\t\tthis.typeError(this.type, value, basePath)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tvalidateValue(value, basePath) {\r\n\t\tlet type = this.type\r\n\t\tlet options = this.options\r\n\r\n\t\tif ('enum' in options) {\r\n\t\t\tthis.validateEnum(value, options, basePath)\r\n\t\t}\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase String:\r\n\t\t\t\treturn this.validateString(value, options, basePath)\r\n\t\t\tcase Number:\r\n\t\t\t\treturn this.validateNumber(value, options, basePath)\r\n\t\t\tcase Boolean:\r\n\t\t\t\treturn typeof value === 'boolean'\r\n\t\t\tcase Set:\r\n\t\t\t\treturn this.validateSet(value, options, basePath)\r\n\t\t\tdefault:\r\n\t\t\t\treturn value instanceof type\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tvalidateNumber(value, options, basePath) {\r\n\t\tif (typeof value !== 'number') return false\r\n\r\n\t\tif (!Number.isFinite(value)) {\r\n\t\t\tthis.throwError(`must be finite number, but have ${value}`, basePath)\r\n\t\t}\r\n\t\tif ('min' in options) if (value < options.min) {\r\n\t\t\tthis.throwError(`must be more or equal ${options.min}, but have ${value}`, basePath)\r\n\t\t}\r\n\t\tif ('max' in options) if (value > options.max) {\r\n\t\t\tthis.throwError(`must be less or equal ${options.max}, but have ${value}`, basePath)\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\r\n\tvalidateString(value, options, basePath) {\r\n\t\tif (typeof value !== 'string') return false\r\n\r\n\t\tif ('test' in options) if (!options.test.test(value)) {\r\n\t\t\tthis.throwError(`must be match test ${options.test}, but have '${value}'`, basePath)\r\n\t\t}\r\n\t\tif ('min' in options) if (value.length < options.min) {\r\n\t\t\tthis.throwError(`length must be more or equal ${options.min} symbols, but have '${value}'`, basePath)\r\n\t\t}\r\n\t\tif ('max' in options) if (value.length > options.max) {\r\n\t\t\tthis.throwError(`length must be less or equal ${options.max} symbols, but have '${value}'`, basePath)\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\r\n\tvalidateEnum(value, options, basePath) {\r\n\t\tlet enums = options.enum\r\n\t\tif (enums.indexOf(value) === -1) {\r\n\t\t\tlet enumText = JSON.stringify(enums)\r\n\t\t\tlet valueText = this.valueToString(value)\r\n\t\t\tlet message = `must be one of enum ${enumText}, but have ${valueText}`\r\n\t\t\tthis.throwError(message, basePath)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tvalidateSet(value, options, basePath) {\r\n\t\tif (!(value instanceof Set)) return false\r\n\t\tif ('set' in options) {\r\n\t\t\tlet sets = options.set\r\n\t\t\tvalue.forEach(item => {\r\n\t\t\t\tif (sets.indexOf(item) === -1) {\r\n\t\t\t\t\tlet setText = JSON.stringify(sets)\r\n\t\t\t\t\tlet itemValue = this.valueToString(item)\r\n\t\t\t\t\tlet message = `must contain item only from ${setText}, but have ${itemValue}`\r\n\t\t\t\t\tthis.throwError(message, basePath)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\r\n\tconvertToModelValue(value) {\r\n\t\tif (value == null) return value\r\n\t\tlet type = this.type\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase String:\r\n\t\t\t\treturn String(value)\r\n\t\t\tcase Number:\r\n\t\t\t\treturn Number(value)\r\n\t\t\tcase Boolean:\r\n\t\t\t\treturn Boolean(value)\r\n\t\t\tcase Date:\r\n\t\t\t\treturn new Date(value)\r\n\t\t\tcase Set:\r\n\t\t\t\treturn new Set(value)\r\n\t\t}\r\n\r\n\t\treturn type.fromJSON(value)\r\n\t}\r\n\r\n\r\n\tconvertToDocumentValue(value) {\r\n\t\tif (value == null) return value\r\n\r\n\t\tswitch (this.type) {\r\n\t\t\tcase String:\r\n\t\t\t\treturn value\r\n\t\t\tcase Number:\r\n\t\t\t\treturn value\r\n\t\t\tcase Boolean:\r\n\t\t\t\treturn value\r\n\t\t\tcase Date:\r\n\t\t\t\treturn value.getTime()\r\n\t\t\tcase Set:\r\n\t\t\t\treturn Array.from(value)\r\n\t\t}\r\n\r\n\t\t// for custom types\r\n\t\treturn value.toJSON()\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\n\r\n"]}