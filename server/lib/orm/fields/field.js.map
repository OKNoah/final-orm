{"version":3,"sources":["field.es6"],"names":[],"mappings":"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","file":"field.js","sourcesContent":["import ValidationError from \"../errors/validation-error\"\r\n\r\n\r\n/** @abstract Field */\r\nexport default class Field {\r\n\r\n\r\n\tconstructor(basePath = [], path, options = {}, internal = false) {\r\n\t\tthis.basePath = basePath\r\n\t\tthis.path = path\r\n\t\tthis.options = options\r\n\t\tthis.internal = internal\r\n\t}\r\n\r\n\r\n\ttoPrettyPath(subPaths) {\r\n\t\tlet props = [].concat(...subPaths)\r\n\r\n\t\tlet prettyPath = props.map((prop, index)=> {\r\n\t\t\tif (!/^[A-Za-z$_]+$/.test(prop)) return `[${prop}]`\r\n\t\t\tif (index === 0) return prop\r\n\t\t\treturn `.${prop}`\r\n\t\t}).join('')\r\n\r\n\t\treturn prettyPath\r\n\t}\r\n\r\n\r\n\ttypeError(type, value, subPath = [], basePath = this.basePath) {\r\n\t\tlet subPaths = [basePath, this.path, subPath]\r\n\t\tlet pathString = this.toPrettyPath(subPaths)\r\n\t\tvar valueText = value\r\n\r\n\t\tif (Object(value) === value) {\r\n\t\t\tvalueText = value.constructor.name\r\n\t\t} else if (typeof value === 'string') {\r\n\t\t\tvalueText = `'${value}'`\r\n\t\t}\r\n\r\n\t\tlet message = `Field '${pathString}' must be ${type.name}, but have ${valueText}`\r\n\t\tthrow new ValidationError(message)\r\n\t}\r\n\r\n\r\n\tthrowError(message, subPath = []) {\r\n\t\tthrow new ValidationRangeError()\r\n\t}\r\n\r\n\r\n\tdocumentToModel(model, document) {\r\n\t\tlet value = this.getByPath(document)\r\n\t\tvalue = this.convertToModelValue(value)\r\n\t\tthis.setByPath(model, value)\r\n\t}\r\n\r\n\r\n\tmodelToDocument(mode, document) {\r\n\t\tif (this.internal) return\r\n\t\tlet value = this.getByPath(mode)\r\n\t\tvalue = this.convertToDocumentValue(value)\r\n\t\tthis.setByPath(document, value)\r\n\t}\r\n\r\n\r\n\tvalidate(data) {\r\n\t\tthrow 'validate is just virtual method'\r\n\t}\r\n\r\n\r\n\tconvertToModelValue(value) {\r\n\t\tthrow 'convertToModelValue is just virtual method'\r\n\t}\r\n\r\n\r\n\tconvertToDocumentValue(value) {\r\n\t\tthrow 'convertToDocumentValue is just virtual method'\r\n\t}\r\n\r\n\r\n\tgetByPath(context) {\r\n\t\tfor (let prop of this.path) {\r\n\t\t\tcontext = context[prop]\r\n\t\t}\r\n\t\treturn context\r\n\t}\r\n\r\n\r\n\tsetByPath(context, value) {\r\n\t\tlet path = this.path.slice()\r\n\t\tlet lastProp = path.pop()\r\n\r\n\t\tfor (let prop of path) {\r\n\t\t\tif (!context[prop]) context[prop] = {}\r\n\t\t\tcontext = context[prop]\r\n\t\t}\r\n\r\n\t\treturn context[lastProp] = value\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n"]}