{"version":3,"sources":["field-schemas.es6"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAGqB,Y;;;AAGpB,uBAAY,QAAZ,EAAsB,IAAtB,EAA4B,UAA5B,EAAwC,OAAxC,EAAiD,QAAjD,EAA2D;AAAA;;AAAA,8FACpD,QADoD,EAC1C,IAD0C,EACpC,OADoC,EAC3B,QAD2B;;AAE1D,QAAK,MAAL,GAAc,qBAAW,UAAX,EAAuB,SAAS,MAAT,CAAgB,IAAhB,EAAsB,CAAC,IAAD,CAAtB,CAAvB,EAAsD,KAAtD,CAAd;AAF0D;AAG1D;;;;2BAGQ,I,EAAM,Q,EAAU;AAAA;;AACxB,OAAI,KAAK,QAAT,EAAmB;AACnB,OAAI,QAAQ,KAAK,SAAL,CAAe,IAAf,CAAZ;;AAEA,OAAI,CAAC,MAAM,OAAN,CAAc,KAAd,CAAL,EAA2B;AAC1B,SAAK,SAAL,CAAe,KAAf,EAAsB,KAAtB;AACA;;AAED,SAAM,OAAN,CAAc,UAAC,KAAD,EAAQ,KAAR,EAAkB;AAC/B,QAAI,UAAU,SAAS,MAAT,CAAgB,OAAK,IAArB,EAA2B,CAAC,KAAD,CAA3B,CAAd;AACA,WAAK,MAAL,CAAY,QAAZ,CAAqB,KAArB,EAA4B,OAA5B;AACA,IAHD;AAKA;;;sCAGmB,K,EAAO;AAAA;;AAC1B,UAAO,MAAM,GAAN,CAAU,oBAAY;AAC5B,QAAI,QAAQ,EAAZ;AACA,WAAO,OAAK,MAAL,CAAY,eAAZ,CAA4B,KAA5B,EAAmC,QAAnC,CAAP;AACA,IAHM,CAAP;AAIA;;;yCAGsB,K,EAAO;AAAA;;AAC7B,UAAO,MAAM,GAAN,CAAU,iBAAS;AACzB,QAAI,WAAW,EAAf;AACA,WAAO,OAAK,MAAL,CAAY,eAAZ,CAA4B,KAA5B,EAAmC,QAAnC,CAAP;AACA,IAHM,CAAP;AAIA;;;;;;kBAtCmB,Y","file":"field-schemas.js","sourcesContent":["import Schema from '../schema'\r\nimport Field from './field'\r\n\r\n\r\nexport default class FieldSchemas extends Field {\r\n\r\n\r\n\tconstructor(basePath, path, userSchema, options, internal) {\r\n\t\tsuper(basePath, path, options, internal)\r\n\t\tthis.schema = new Schema(userSchema, basePath.concat(path, ['..']), false)\r\n\t}\r\n\r\n\r\n\tvalidate(data, basePath) {\r\n\t\tif (this.internal) return\r\n\t\tlet array = this.getByPath(data)\r\n\r\n\t\tif (!Array.isArray(array)) {\r\n\t\t\tthis.typeError(Array, array)\r\n\t\t}\r\n\r\n\t\tarray.forEach((value, index) => {\r\n\t\t\tlet subPath = basePath.concat(this.path, [index])\r\n\t\t\tthis.schema.validate(value, subPath)\r\n\t\t})\r\n\r\n\t}\r\n\r\n\r\n\tconvertToModelValue(array) {\r\n\t\treturn array.map(document => {\r\n\t\t\tlet model = {}\r\n\t\t\treturn this.schema.documentToModel(model, document)\r\n\t\t})\r\n\t}\r\n\r\n\r\n\tconvertToDocumentValue(array) {\r\n\t\treturn array.map(model => {\r\n\t\t\tlet document = {}\r\n\t\t\treturn this.schema.modelToDocument(model, document)\r\n\t\t})\r\n\t}\r\n\r\n}\r\n\r\n"]}